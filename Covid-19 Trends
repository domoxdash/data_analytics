{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "3067056d-daa9-45b5-82d7-134caa86c258",
   "metadata": {},
   "source": [
    "Time Series Algorithm, Dominique Clemons \n",
    "\n",
    "Data : https://www.kaggle.com/datasets/imdevskp/corona-virus-report?select=full_grouped.csv\n",
    "\n",
    "Github : https://github.com/domoxdash/data_analytics/blob/main/covid%2019%20trends.ipnyb\n",
    "\n",
    "Times series analysis is a way to study how variables change over time through analyzing data collected over an interval of time. It is a helpful method to understand and identify patterns and trends as well as seasonality. You can also forecast the future values based on the historical data. Time series analysis is useful for detecting patterns found in healthcare and financial related data. \n",
    "\n",
    "Advantages of time series data analysis includes the chance to analyze historical and future data while also interpreting the meaning of data and understand trends. It can also help understand if certain factors affect a variable during specific time periods. Disadvantages of time series data analysis include the dependency of time, while other algorithms like regression are independent of time and collected randomly. Another disadvantage is that this algorithm requires a large set of data points to make sure the data is consistent and reliable for analysis. An example of a time series model is forecasting. It allows you to predict future data based on historical trends to predict what could happen in the future. One method of carrying out forecasting is by using ARIMA, or autoregressive integreated moving average. ARIMA is used to understand a single time-dependent variable to predict future trends. \n",
    "\n",
    "Sars-Cov-2 (Covid-19) is an infectious disease caused by severe acute respiratory syndrome coronavirus 2). The pandemic of 2019 showed how biological agents could be a potential threat to the global population. The use of data analytical skills would help predict potential global pandemics that could happen in the future. The novel coronavirus, identified  on January 7, was a new strain that had not been previously identified to cause infection in humans. We will use ARIMA to analyze and understand the trends fo COVID-19 data that was collected between January 2020 and July 2020 to predict the future amount of confirmed cases in the future. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "5f30d420-a35a-495a-b668-e290f611c0b1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Country/Region</th>\n",
       "      <th>Confirmed</th>\n",
       "      <th>Deaths</th>\n",
       "      <th>Recovered</th>\n",
       "      <th>Active</th>\n",
       "      <th>New cases</th>\n",
       "      <th>New deaths</th>\n",
       "      <th>New recovered</th>\n",
       "      <th>WHO Region</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2020-01-22</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Eastern Mediterranean</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2020-01-22</td>\n",
       "      <td>Albania</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Europe</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2020-01-22</td>\n",
       "      <td>Algeria</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Africa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2020-01-22</td>\n",
       "      <td>Andorra</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Europe</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2020-01-22</td>\n",
       "      <td>Angola</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Africa</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Date Country/Region  Confirmed  Deaths  Recovered  Active  New cases  \\\n",
       "0  2020-01-22    Afghanistan          0       0          0       0          0   \n",
       "1  2020-01-22        Albania          0       0          0       0          0   \n",
       "2  2020-01-22        Algeria          0       0          0       0          0   \n",
       "3  2020-01-22        Andorra          0       0          0       0          0   \n",
       "4  2020-01-22         Angola          0       0          0       0          0   \n",
       "\n",
       "   New deaths  New recovered             WHO Region  \n",
       "0           0              0  Eastern Mediterranean  \n",
       "1           0              0                 Europe  \n",
       "2           0              0                 Africa  \n",
       "3           0              0                 Europe  \n",
       "4           0              0                 Africa  "
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#import data and libraries\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "df = pd.read_csv(\"full_grouped.csv\")\n",
    "df.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "e1e9d7ce-7665-4805-aa3d-23aaf15f5cba",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Country</th>\n",
       "      <th>Confirmed</th>\n",
       "      <th>Deaths</th>\n",
       "      <th>Recovered</th>\n",
       "      <th>Active</th>\n",
       "      <th>New cases</th>\n",
       "      <th>New deaths</th>\n",
       "      <th>New recovered</th>\n",
       "      <th>WHO Region</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2020-01-22</td>\n",
       "      <td>Antigua and Barbuda</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Americas</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2020-01-22</td>\n",
       "      <td>Argentina</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Americas</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>2020-01-22</td>\n",
       "      <td>Bahamas</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Americas</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>2020-01-22</td>\n",
       "      <td>Barbados</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Americas</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>2020-01-22</td>\n",
       "      <td>Belize</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Americas</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35129</th>\n",
       "      <td>2020-07-27</td>\n",
       "      <td>Suriname</td>\n",
       "      <td>1483</td>\n",
       "      <td>24</td>\n",
       "      <td>925</td>\n",
       "      <td>534</td>\n",
       "      <td>44</td>\n",
       "      <td>1</td>\n",
       "      <td>35</td>\n",
       "      <td>Americas</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35139</th>\n",
       "      <td>2020-07-27</td>\n",
       "      <td>Trinidad and Tobago</td>\n",
       "      <td>148</td>\n",
       "      <td>8</td>\n",
       "      <td>128</td>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Americas</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35142</th>\n",
       "      <td>2020-07-27</td>\n",
       "      <td>US</td>\n",
       "      <td>4290259</td>\n",
       "      <td>148011</td>\n",
       "      <td>1325804</td>\n",
       "      <td>2816444</td>\n",
       "      <td>56336</td>\n",
       "      <td>1076</td>\n",
       "      <td>27941</td>\n",
       "      <td>Americas</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35147</th>\n",
       "      <td>2020-07-27</td>\n",
       "      <td>Uruguay</td>\n",
       "      <td>1202</td>\n",
       "      <td>35</td>\n",
       "      <td>951</td>\n",
       "      <td>216</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Americas</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35149</th>\n",
       "      <td>2020-07-27</td>\n",
       "      <td>Venezuela</td>\n",
       "      <td>15988</td>\n",
       "      <td>146</td>\n",
       "      <td>9959</td>\n",
       "      <td>5883</td>\n",
       "      <td>525</td>\n",
       "      <td>4</td>\n",
       "      <td>213</td>\n",
       "      <td>Americas</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>6580 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             Date              Country  Confirmed  Deaths  Recovered   Active  \\\n",
       "5      2020-01-22  Antigua and Barbuda          0       0          0        0   \n",
       "6      2020-01-22            Argentina          0       0          0        0   \n",
       "11     2020-01-22              Bahamas          0       0          0        0   \n",
       "14     2020-01-22             Barbados          0       0          0        0   \n",
       "17     2020-01-22               Belize          0       0          0        0   \n",
       "...           ...                  ...        ...     ...        ...      ...   \n",
       "35129  2020-07-27             Suriname       1483      24        925      534   \n",
       "35139  2020-07-27  Trinidad and Tobago        148       8        128       12   \n",
       "35142  2020-07-27                   US    4290259  148011    1325804  2816444   \n",
       "35147  2020-07-27              Uruguay       1202      35        951      216   \n",
       "35149  2020-07-27            Venezuela      15988     146       9959     5883   \n",
       "\n",
       "       New cases  New deaths  New recovered WHO Region  \n",
       "5              0           0              0   Americas  \n",
       "6              0           0              0   Americas  \n",
       "11             0           0              0   Americas  \n",
       "14             0           0              0   Americas  \n",
       "17             0           0              0   Americas  \n",
       "...          ...         ...            ...        ...  \n",
       "35129         44           1             35   Americas  \n",
       "35139          1           0              0   Americas  \n",
       "35142      56336        1076          27941   Americas  \n",
       "35147         10           1              3   Americas  \n",
       "35149        525           4            213   Americas  \n",
       "\n",
       "[6580 rows x 10 columns]"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#data cleaning \n",
    "df.groupby(df['WHO Region']) #group by the Americas WHO Region\n",
    "    \n",
    "usa = ['Americas']\n",
    "df = df.loc[df['WHO Region'].isin(usa)]\n",
    "\n",
    "df = df.rename(columns={'Country/Region': 'Country'})\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "f9ee4468-95cd-44fd-8e17-62bff6094795",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Date             object\n",
       "Country          object\n",
       "Confirmed         int64\n",
       "Deaths            int64\n",
       "Recovered         int64\n",
       "Active            int64\n",
       "New cases         int64\n",
       "New deaths        int64\n",
       "New recovered     int64\n",
       "WHO Region       object\n",
       "dtype: object"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "40ffc8e7-c34f-40eb-ac3c-536921cb0cbb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Date             0\n",
      "Country          0\n",
      "Confirmed        0\n",
      "Deaths           0\n",
      "Recovered        0\n",
      "Active           0\n",
      "New cases        0\n",
      "New deaths       0\n",
      "New recovered    0\n",
      "WHO Region       0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "#data cleaning - checking missing data\n",
    "missing = df.isnull().sum() #checking missing values\n",
    "\n",
    "print (missing)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "d430ee43-5039-46fc-a7e8-4c86dbcba9d0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Total Confirmed Cases by Country in the Americas - WHO Region')"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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3qGSQn369OHhhx+udxiSJEmSJEmzjYh4rrXlDh+TJEmSJElqQCaFJEmSJEmSGpBJIUmSJEmSpAbUoXoKSZIkSZKk2pg8eTIvvPAC77//fr1DUY10796dxRdfnG7durVpfZNCkiRJkiQ1gBdeeIH555+fPn36EBH1DkezWGbyxhtv8MILL7D00ku36TEOH5MkSZIkqQG8//77LLzwwiaEZlMRwcILLzxTlWAmhSRJkiRJahAmhGZvM7t/TQpJkiRJkiQ1IHsKSZIkSZLUgLbZ5qVZur0bbug9w3VeeeUVDjvsMIYNG8Zcc81Fnz59OPnkk1lmmWVm+vnuvvtuDjjgALp168ZNN93EoYceyjXXXPNZQp8p8803H5MmTar587QHK4UkSZIkSVLNZSbbbbcdG2ywAc888wxPPPEEv/zlL3n11Vc/0/Yuu+wyjjzySEaMGMFiiy3WakLoww8//Lxhz9ZMCkmSJEmSpJq7/fbb6datGwcccMDUZQMGDGDdddclMxkyZAh9+/alX79+XHnllQDccccdbLDBBuy4444st9xy7L777mQm559/PldddRXHH388u+++O2PHjqVv374AXHTRRey0005svfXWbLbZZlx00UVsu+22bL311iy99NKcfvrpnHTSSay88sqsscYavPnmmwA888wzbL755qy66qqsu+66jB49GoBnn32WNddck0GDBvHjH/94mq/v4osvZqWVVqJ///7sscceANx4442svvrqrLzyymyyySZTE2B33nknAwYMYMCAAay88spMnDgRgBNOOIFBgwax0kor8ZOf/ASAd955hy233JL+/fvTt2/fqb+bWaHTDh+b1WVu+rS2lP5JkiRJktQWjz/+OKuuumqr91177bWMGDGCkSNH8vrrrzNo0CDWW289AB599FFGjRpF7969WXvttbn33nvZd999ueeee9hqq63YcccdGTt27Ce2d//99/PYY4+x0EILcdFFF/H444/z6KOP8v777/PVr36V3/zmNzz66KMcfvjhXHzxxRx22GHsv//+nH322Xzta1/jwQcf5KCDDuK2227j0EMP5cADD2TPPffkjDPOaDX+UaNG8Ytf/IJ7772Xnj17Tk00rbPOOjzwwANEBOeffz6//e1v+d3vfseJJ57IGWecwdprr82kSZPo3r07Q4cOZcyYMTz00ENkJttssw133XUX48aNo3fv3tx0000ATJgwYRbtESuFJEmSJElSnd1zzz3stttudO3alUUXXZT111+fYcOGAbDaaqux+OKL06VLFwYMGPCpBFBrNt10UxZaaKGptzfccEPmn39+evXqRY8ePdh6660B6NevH2PHjmXSpEncd9997LTTTgwYMIDvfve7vPzyywDce++97LbbbgBTK4Bauu2229hxxx3p2bMnwNTnfuGFFxg8eDD9+vXjhBNOYNSoUQCsvfbaHHHEEZx66qmMHz+eOeaYg6FDhzJ06FBWXnllVlllFUaPHs2YMWPo168ft9xyC0cffTR33303PXr0+Ay/4daZFJIkSZIkSTW34oorMnz48Fbvy8xpPm6uueaa+nPXrl3b1Cdo3nnnneY2unTpMvV2ly5d+PDDD/noo49YcMEFGTFixNR/Tz755NTHzGiq98xsdZ3vfe97HHzwwfzrX//inHPO4f333wfgBz/4Aeeffz7vvfcea6yxBqNHjyYzOeaYY6Y+/9NPP813vvMdlllmGYYPH06/fv045phjOP7442f4+tvKpJAkSZIkSaq5jTbaiA8++IDzzjtv6rJhw4Zx5513st5663HllVcyZcoUxo0bx1133cVqq63WbrEtsMACLL300lx99dVASfKMHDkSKFU9V1xxBVCaW7dm44035qqrruKNN94AmDp8bMKECSy22GIA/PGPf5y6/jPPPEO/fv04+uijGThwIKNHj2bw4MFceOGFU2c2e/HFF3nttdd46aWXmGeeefjWt77FkUceySOPPDLLXnen7SkkSZIkSZI+u/buIxsRXHfddRx22GH8+te/pnv37lOnpF9vvfW4//776d+/PxHBb3/7W774xS9ObfbcHi677DIOPPBAfv7znzN58mR23XVX+vfvzymnnMI3v/lNTjnlFHbYYYdWH7viiivywx/+kPXXX5+uXbuy8sorc9FFF3Hcccex0047sdhii7HGGmvw7LPPAnDyySdz++2307VrV1ZYYQW22GIL5pprLp588knWXHNNAOabbz4uvfRSnn76aYYMGUKXLl3o1q0bZ5111ix7zTG9Eq32NnDgwHz44YfbtK6NpmvPRtOSJEmSNPt48sknWX755esdhmqstf0cEcMzc2DLdR0+JkmSJEmS1IBMCkmSJEmSJDUgk0KSJEmSJEkNyKSQJEmSJElSAzIpJEmSJEmS1IBMCkmSJEmSJDWgOeodgCRJkiRJan8b/m7DWbq9279/+wzX6dq1K/369ePDDz9k6aWX5pJLLmHBBRecpXHU2nHHHcd8883HkUce+an7Lr74Yn7729+SmWQm++yzT6vrdRRWCkmSJEmSpHYx99xzM2LECB5//HEWWmghzjjjjHqHBEBm8tFHH32ubfztb3/j5JNPZujQoYwaNYpHHnmEHj16zKIIa8OkkCRJkiRJandrrrkmL774IgDPPPMMm2++Oauuuirrrrsuo0ePBuDVV19lu+22o3///vTv35/77rsPgJNOOom+ffvSt29fTj75ZACOPvpozjzzzKnbP+644/jd734HwAknnMCgQYNYaaWV+MlPfgLA2LFjWX755TnooINYZZVVeP7551tdD+AXv/gFyy67LJtssglPPfVUq6/nV7/6FSeeeCK9e/cGoHv37uy3334AnHfeeQwaNIj+/fuzww478O677wJw9dVX07dvX/r37896660HwJQpUxgyZMjUOM455xwAXn75ZdZbbz0GDBhA3759ufvuuz/nHmiHpFBEdI2IRyPir7V+LkmSJEmS1PFNmTKFW2+9lW222QaA/fffn9NOO43hw4dz4oknctBBBwFwyCGHsP766zNy5EgeeeQRVlxxRYYPH84f/vAHHnzwQR544AHOO+88Hn30UXbddVeuvPLKqc9x1VVXsdNOOzF06FDGjBnDQw89xIgRIxg+fDh33XUXAE899RR77rknjz76KE899VSr6w0fPpwrrriCRx99lGuvvZZhw4a1+poef/xxVl111Vbv23777Rk2bBgjR45k+eWX54ILLgDg+OOP5x//+AcjR47khhtuAOCCCy6gR48eDBs2jGHDhnHeeefx7LPPcvnllzN48GBGjBjByJEjGTBgwOfeD+3RU+hQ4ElggXZ4LkmSJEmS1EG99957DBgwgLFjx7Lqqquy6aabMmnSJO677z522mmnqet98MEHANx2221cfPHFQOlH1KNHD+655x6222475p13XqAkXO6++24OOeQQXnvtNV566SXGjRvHF77wBZZccklOPfVUhg4dysorrwzApEmTGDNmDEsuuSRLLbUUa6yxBgBDhw5tdb2JEyey3XbbMc888wBMTWTNjMcff5wf/ehHjB8/nkmTJjF48GAA1l57bfbee2923nlntt9++6lxPPbYY1xzzTUATJgwgTFjxjBo0CD22WcfJk+ezLbbbtvxk0IRsTiwJfAL4IhaPpckSZIkSerYmnoKTZgwga222oozzjiDvffemwUXXJARI0a0aRuZOc37dtxxR6655hpeeeUVdt1116nrH3PMMXz3u9/9xLpjx46dmlia3nonn3wyETHDuJqqmDbaaKNP3bf33ntz/fXX079/fy666CLuuOMOAM4++2wefPBBbrrpJgYMGMCIESPITE477bSpiaPm7rrrLm666Sb22GMPhgwZwp577jnDuKan1sPHTgaOAqbZrSki9o+IhyPi4XHjxtU4HEmSJEmSVG89evTg1FNP5cQTT2Tuuedm6aWX5uqrrwZKcmbkyJEAbLzxxpx11llAGXL29ttvs95663H99dfz7rvv8s4773Ddddex7rrrArDrrrtyxRVXcM0117DjjjsCMHjwYC688EImTZoEwIsvvshrr732qZimtd56663Hddddx3vvvcfEiRO58cYbW31NxxxzDEcddRSvvPIKUKqdTj31VAAmTpzIl770JSZPnsxll1029THPPPMMq6++Oscffzw9e/bk+eefZ/DgwZx11llMnjwZgH//+9+88847PPfccyyyyCLst99+fOc73+GRRx75HHugqFmlUERsBbyWmcMjYoNprZeZ5wLnAgwcOHDa6T5JkiRJkjTLtGUK+VpaeeWV6d+/P1dccQWXXXYZBx54ID//+c+ZPHkyu+66K/379+eUU05h//3354ILLqBr166cddZZrLnmmuy9996sttpqAOy7775Th3ytuOKKTJw4kcUWW4wvfelLAGy22WY8+eSTrLnmmgDMN998XHrppXTt2vUT8UxrvVVWWYVddtmFAQMGsNRSS01NQLX09a9/nVdffZVNNtmEzCQi2GeffQD42c9+xuqrr85SSy1Fv379mDhxIgBDhgxhzJgxZCYbb7wx/fv3Z6WVVmLs2LGsssoqZCa9evXi+uuv54477uCEE06gW7duzDfffFOH1X0eMb2yq8+14YhfAXsAHwLdKT2Frs3Mb03rMQMHDsyHH364TdvfZpuXZkWYmo4bbuhd7xAkSZIkSbPIk08+yfLLL1/vMFRjre3niBiemQNbrluz4WOZeUxmLp6ZfYBdgdumlxCSJEmSJElS+6n5lPSSJEmSJEnqeNpjSnoy8w7gjvZ4LkmSJEmSJM2YlUKSJEmSJEkNyKSQJEmSJElSAzIpJEmSJEmS1IDapaeQJEmSJEnqWAYO/NQM5Z/Lww8/PMN1unbtSr9+/Zg8eTJzzDEHe+21F4cddhhdusx8zcr48eO5/PLLOeiggwC44447OPHEE/nrX/8609tqVFYKSZIkSZKkdjH33HMzYsQIRo0axT//+U9uvvlmfvrTn36mbY0fP54zzzxzFkfYWEwKSZIkSZKkdrfIIotw7rnncvrpp5OZTJkyhSFDhjBo0CBWWmklzjnnHAAmTZrExhtvzCqrrEK/fv34y1/+AsAPfvADnnnmGQYMGMCQIUOmrrvjjjuy3HLLsfvuu5OZU9ddYYUVWGmllTjyyCPr84I7IIePSZIkSZKkuvjyl7/MRx99xGuvvcZf/vIXevTowbBhw/jggw9Ye+212WyzzVhiiSW47rrrWGCBBXj99ddZY4012Gabbfj1r3/N448/zogRI4AyfOzRRx9l1KhR9O7dm7XXXpt7772XFVZYgeuuu47Ro0cTEYwfP76ur7kjsVJIkiRJkiTVTVM1z9ChQ7n44osZMGAAq6++Om+88QZjxowhMzn22GNZaaWV2GSTTXjxxRd59dVXW93WaqutxuKLL06XLl0YMGAAY8eOZYEFFqB79+7su+++XHvttcwzzzzt+fI6NCuFJEmSJElSXfznP/+ha9euLLLIImQmp512GoMHD/7EOhdddBHjxo1j+PDhdOvWjT59+vD++++3ur255ppr6s9du3blww8/ZI455uChhx7i1ltv5YorruD000/ntttuq+nr6iysFJIkSZIkSe1u3LhxHHDAARx88MFEBIMHD+ass85i8uTJAPz73//mnXfeYcKECSyyyCJ069aN22+/neeeew6A+eefn4kTJ87weSZNmsSECRP4+te/zsknnzx1uJmsFJIkSZIkqSG1ZQr5We29995jwIABU6ek32OPPTjiiCMA2HfffRk7diyrrLIKmUmvXr24/vrr2X333dl6660ZOHAgAwYMYLnllgNg4YUXZu2116Zv375sscUWbLnllq0+58SJE/nGN77B+++/T2by+9//vt1eb0cXTWP3OoKBAwdmW/8ot9nmpRpHoxtu6F3vECRJkiRJs8iTTz7J8ssvX+8wVGOt7eeIGJ6ZA1uu6/AxSZIkSZKkBmRSSJIkSZIkqQGZ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\n",
      "text/plain": [
       "<Figure size 1440x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 1008x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Analyze the Data \n",
    "df2=df.groupby(['Country']).agg('max')\n",
    "\n",
    "df2.sort_values('Confirmed',ascending=False,inplace=True)\n",
    "df2=df2[0:10]\n",
    "df2.reset_index(inplace=True)\n",
    "\n",
    "#graph - cases by country (Americas-WHO Region)\n",
    "f=plt.figure(figsize=(20,5))\n",
    "ax=sns.barplot(x=df2['Country'],y=df2['Confirmed'], color='blue',alpha=0.8,label='Confirmed cases')\n",
    "ax=sns.barplot(x=df2['Country'],y=df2['Recovered'],alpha=0.8, color='green', label='Recovered Cases')\n",
    "ax=sns.barplot(x=df2['Country'],y=df2['Deaths'],alpha=0.8, color='black', label='Deaths')\n",
    "#recovered - amount of people that recovered from the viral infection\n",
    "#deaths - amount of people that passed away due to the viral infection\n",
    "plt.legend()\n",
    "plt.ylabel('Amount of Cases')\n",
    "plt.xticks(rotation=25)\n",
    "plt.title('Cases by Country (Americas - WHO Region)')\n",
    "\n",
    "#graph - total confirmed cases overall in Americas WHO Region\n",
    "plt.figure(figsize=(14, 7))\n",
    "df.groupby(\"Country\")[\"Confirmed\"].sum().sort_values(ascending=False).plot.bar()\n",
    "plt.ylabel('Amount of Confirmed Cases')\n",
    "plt.title ('Total Confirmed Cases by Country in the Americas - WHO Region')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "b5a74f8e-46ff-4c2d-aded-b77e26649596",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_94/1928580125.py:3: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  total['Date'] = pd.to_datetime(total['Date'])\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#analyze data based on total confirmed cases worldwide\n",
    "total = df[['Date', 'Confirmed']]\n",
    "total['Date'] = pd.to_datetime(total['Date'])\n",
    "total=total.set_index(total['Date']).drop('Date',axis=1).resample('d').sum()\n",
    "total\n",
    "\n",
    "#graph - growth rate of total amount of confirmed cases \n",
    "total['Growth Rate'] = (total[\"Confirmed\"] - total[\"Confirmed\"].shift(1)) / total[\"Confirmed\"].shift(1) * 100\n",
    "#Growth Rate = ((New Value - Old Value) / Old Value)\n",
    "plt.plot(total.index, total['Growth Rate'], linestyle='-', color='blue')\n",
    "plt.xlabel(None)\n",
    "plt.ylabel('Growth Rate (%)')\n",
    "plt.title(\"Growth Rate of Total Confirmed Cases from January 2020 - July 2020\")\n",
    "plt.grid(True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "edf02e3c-4186-4c36-ba7a-637143138300",
   "metadata": {},
   "source": [
    "Exploratory Data Analysis Summary\n",
    "The United States has the highest amount of confirmed, recovered and death cases in the Americas Region. This could be due to a potentially higher population size, increased means of testing and standardized reporting systems implemented by the CDC, FDA and governmental agencies. The growth rate is a graph that shows the change in a variable over time. The growth rate of total confirmed cases shows that the total number of cases peaked in January 2020, followed by smaller peaks in March and a steady decline from April through July. This could be due to factors such as the normal respiratory viral season (winter to spring), low mask usage, or even decreased testing during the lowered times. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "672edff6-ffec-4a78-b139-4761748e8f69",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Defaulting to user installation because normal site-packages is not writeable\n",
      "Looking in links: /usr/share/pip-wheels\n",
      "Requirement already satisfied: pmdarima in ./.local/lib/python3.9/site-packages (2.0.4)\n",
      "Requirement already satisfied: scipy>=1.3.2 in /opt/conda/envs/anaconda-2022.05-py39/lib/python3.9/site-packages (from pmdarima) (1.7.3)\n",
      "Requirement already satisfied: scikit-learn>=0.22 in /opt/conda/envs/anaconda-2022.05-py39/lib/python3.9/site-packages (from pmdarima) (1.0.2)\n",
      "Requirement already satisfied: numpy>=1.21.2 in ./.local/lib/python3.9/site-packages (from pmdarima) (1.22.4)\n",
      "Requirement already satisfied: Cython!=0.29.18,!=0.29.31,>=0.29 in /opt/conda/envs/anaconda-2022.05-py39/lib/python3.9/site-packages (from pmdarima) (0.29.28)\n",
      "Requirement already satisfied: setuptools!=50.0.0,>=38.6.0 in /opt/conda/envs/anaconda-2022.05-py39/lib/python3.9/site-packages (from pmdarima) (61.2.0)\n",
      "Requirement already satisfied: packaging>=17.1 in /opt/conda/envs/anaconda-2022.05-py39/lib/python3.9/site-packages (from pmdarima) (21.3)\n",
      "Requirement already satisfied: urllib3 in /opt/conda/envs/anaconda-2022.05-py39/lib/python3.9/site-packages (from pmdarima) (1.26.9)\n",
      "Requirement already satisfied: joblib>=0.11 in ./.local/lib/python3.9/site-packages (from pmdarima) (1.3.2)\n",
      "Requirement already satisfied: statsmodels>=0.13.2 in /opt/conda/envs/anaconda-2022.05-py39/lib/python3.9/site-packages (from pmdarima) (0.13.2)\n",
      "Requirement already satisfied: pandas>=0.19 in /opt/conda/envs/anaconda-2022.05-py39/lib/python3.9/site-packages (from pmdarima) (1.4.2)\n",
      "Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/envs/anaconda-2022.05-py39/lib/python3.9/site-packages (from packaging>=17.1->pmdarima) (3.0.4)\n",
      "Requirement already satisfied: python-dateutil>=2.8.1 in /opt/conda/envs/anaconda-2022.05-py39/lib/python3.9/site-packages (from pandas>=0.19->pmdarima) (2.8.2)\n",
      "Requirement already satisfied: pytz>=2020.1 in /opt/conda/envs/anaconda-2022.05-py39/lib/python3.9/site-packages (from pandas>=0.19->pmdarima) (2021.3)\n",
      "Requirement already satisfied: six>=1.5 in /opt/conda/envs/anaconda-2022.05-py39/lib/python3.9/site-packages (from python-dateutil>=2.8.1->pandas>=0.19->pmdarima) (1.16.0)\n",
      "Requirement already satisfied: threadpoolctl>=2.0.0 in /opt/conda/envs/anaconda-2022.05-py39/lib/python3.9/site-packages (from scikit-learn>=0.22->pmdarima) (2.2.0)\n",
      "Requirement already satisfied: patsy>=0.5.2 in /opt/conda/envs/anaconda-2022.05-py39/lib/python3.9/site-packages (from statsmodels>=0.13.2->pmdarima) (0.5.2)\n"
     ]
    }
   ],
   "source": [
    "!pip install pmdarima"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f00a5683-aa3c-4a01-ac4b-08d741e25b9e",
   "metadata": {},
   "source": [
    "Steps for ARIMA \n",
    "The ARIMA model is used to create a time series that contains data with a constant mean and variance. \n",
    "    1. Differencing - parameter (d), determines the amount of times the operation will be applied to the time series \n",
    "    2. An autoregressive model - parameter (p), estimates the value for time (t) as a linear combination of (p), where (p) is a parameter set by the user. \n",
    "    3. Moving Average Model - estimates the value for time (t) as the mean of the series plus a linear combination of errors from (q). The number of previous time steps to take into account is a parameter set by the user. \n",
    "    4. Model Evaluation - forecasts the future and compare forecasts with real current testing data. \n",
    "    5. Metrics - measures the validity of the model\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "0c196771-2102-440d-ac2d-d7d96dfe0c42",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pmdarima as pmd\n",
    "from pmdarima import auto_arima\n",
    "\n",
    "from statsmodels.tsa.arima.model import ARIMA\n",
    "\n",
    "import sklearn\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.metrics import mean_absolute_error\n",
    "from sklearn import preprocessing\n",
    "\n",
    "from math import sqrt\n",
    "from sklearn.metrics import mean_squared_error"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "5cbc6523-c492-4ce5-9919-d6cbde7b5acc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Performing stepwise search to minimize aic\n",
      " ARIMA(2,2,2)(0,0,0)[0]             : AIC=3953.457, Time=0.32 sec\n",
      " ARIMA(0,2,0)(0,0,0)[0]             : AIC=3972.793, Time=0.02 sec\n",
      " ARIMA(1,2,0)(0,0,0)[0]             : AIC=3974.766, Time=0.02 sec\n",
      " ARIMA(0,2,1)(0,0,0)[0]             : AIC=3974.776, Time=0.03 sec\n",
      " ARIMA(1,2,2)(0,0,0)[0]             : AIC=3950.715, Time=0.07 sec\n",
      " ARIMA(0,2,2)(0,0,0)[0]             : AIC=3941.666, Time=0.05 sec\n",
      " ARIMA(0,2,3)(0,0,0)[0]             : AIC=3944.239, Time=0.06 sec\n",
      " ARIMA(1,2,1)(0,0,0)[0]             : AIC=3956.572, Time=0.05 sec\n",
      " ARIMA(1,2,3)(0,0,0)[0]             : AIC=3919.311, Time=0.13 sec\n",
      " ARIMA(2,2,3)(0,0,0)[0]             : AIC=3849.491, Time=0.33 sec\n",
      " ARIMA(3,2,3)(0,0,0)[0]             : AIC=3865.670, Time=0.40 sec\n",
      " ARIMA(2,2,4)(0,0,0)[0]             : AIC=3919.465, Time=0.28 sec\n",
      " ARIMA(1,2,4)(0,0,0)[0]             : AIC=3942.221, Time=0.20 sec\n",
      " ARIMA(3,2,2)(0,0,0)[0]             : AIC=3861.060, Time=0.34 sec\n",
      " ARIMA(3,2,4)(0,0,0)[0]             : AIC=3854.078, Time=0.53 sec\n",
      " ARIMA(2,2,3)(0,0,0)[0] intercept   : AIC=inf, Time=0.45 sec\n",
      "\n",
      "Best model:  ARIMA(2,2,3)(0,0,0)[0]          \n",
      "Total fit time: 3.330 seconds\n"
     ]
    }
   ],
   "source": [
    "#Summarize the data\n",
    "stepwise_fit_confrimed = auto_arima(total[\"Confirmed\"],trace=True,suppress_warnings=True)\n",
    "stepwise_fit_confrimed.summary()\n",
    "\n",
    "from pmdarima.model_selection import train_test_split\n",
    "#split data\n",
    "train= total.iloc[:-30]\n",
    "test= total.iloc[-30:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "06efadad-ff8f-45c1-b91a-1574831bedcc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>SARIMAX Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>       <td>Confirmed</td>    <th>  No. Observations:  </th>    <td>158</td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>            <td>ARIMA(3, 2, 4)</td>  <th>  Log Likelihood     </th> <td>-1583.306</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>            <td>Mon, 27 Nov 2023</td> <th>  AIC                </th> <td>3182.613</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                <td>23:26:48</td>     <th>  BIC                </th> <td>3207.011</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Sample:</th>             <td>01-22-2020</td>    <th>  HQIC               </th> <td>3192.522</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th></th>                   <td>- 06-27-2020</td>   <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>        <td>opg</td>       <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "     <td></td>       <th>coef</th>     <th>std err</th>      <th>z</th>      <th>P>|z|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>ar.L1</th>  <td>    0.4198</td> <td>    0.522</td> <td>    0.804</td> <td> 0.421</td> <td>   -0.604</td> <td>    1.443</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>ar.L2</th>  <td>    0.3419</td> <td>    0.446</td> <td>    0.766</td> <td> 0.444</td> <td>   -0.533</td> <td>    1.216</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>ar.L3</th>  <td>   -0.2214</td> <td>    0.138</td> <td>   -1.603</td> <td> 0.109</td> <td>   -0.492</td> <td>    0.049</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>ma.L1</th>  <td>   -0.7724</td> <td>    0.554</td> <td>   -1.394</td> <td> 0.163</td> <td>   -1.858</td> <td>    0.314</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>ma.L2</th>  <td>   -0.7788</td> <td>    0.644</td> <td>   -1.210</td> <td> 0.226</td> <td>   -2.040</td> <td>    0.483</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>ma.L3</th>  <td>    0.6817</td> <td>    0.205</td> <td>    3.326</td> <td> 0.001</td> <td>    0.280</td> <td>    1.083</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>ma.L4</th>  <td>    0.1969</td> <td>    0.375</td> <td>    0.526</td> <td> 0.599</td> <td>   -0.537</td> <td>    0.931</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>sigma2</th> <td> 4.787e+07</td> <td>    1e-07</td> <td> 4.77e+14</td> <td> 0.000</td> <td> 4.79e+07</td> <td> 4.79e+07</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Ljung-Box (L1) (Q):</th>      <td>0.16</td>   <th>  Jarque-Bera (JB):  </th> <td>758.45</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Q):</th>                 <td>0.68</td>   <th>  Prob(JB):          </th>  <td>0.00</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Heteroskedasticity (H):</th> <td>8855.03</td> <th>  Skew:              </th>  <td>1.51</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(H) (two-sided):</th>     <td>0.00</td>   <th>  Kurtosis:          </th>  <td>13.37</td>\n",
       "</tr>\n",
       "</table><br/><br/>Warnings:<br/>[1] Covariance matrix calculated using the outer product of gradients (complex-step).<br/>[2] Covariance matrix is singular or near-singular, with condition number 4.56e+30. Standard errors may be unstable."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                               SARIMAX Results                                \n",
       "==============================================================================\n",
       "Dep. Variable:              Confirmed   No. Observations:                  158\n",
       "Model:                 ARIMA(3, 2, 4)   Log Likelihood               -1583.306\n",
       "Date:                Mon, 27 Nov 2023   AIC                           3182.613\n",
       "Time:                        23:26:48   BIC                           3207.011\n",
       "Sample:                    01-22-2020   HQIC                          3192.522\n",
       "                         - 06-27-2020                                         \n",
       "Covariance Type:                  opg                                         \n",
       "==============================================================================\n",
       "                 coef    std err          z      P>|z|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------\n",
       "ar.L1          0.4198      0.522      0.804      0.421      -0.604       1.443\n",
       "ar.L2          0.3419      0.446      0.766      0.444      -0.533       1.216\n",
       "ar.L3         -0.2214      0.138     -1.603      0.109      -0.492       0.049\n",
       "ma.L1         -0.7724      0.554     -1.394      0.163      -1.858       0.314\n",
       "ma.L2         -0.7788      0.644     -1.210      0.226      -2.040       0.483\n",
       "ma.L3          0.6817      0.205      3.326      0.001       0.280       1.083\n",
       "ma.L4          0.1969      0.375      0.526      0.599      -0.537       0.931\n",
       "sigma2      4.787e+07      1e-07   4.77e+14      0.000    4.79e+07    4.79e+07\n",
       "===================================================================================\n",
       "Ljung-Box (L1) (Q):                   0.16   Jarque-Bera (JB):               758.45\n",
       "Prob(Q):                              0.68   Prob(JB):                         0.00\n",
       "Heteroskedasticity (H):            8855.03   Skew:                             1.51\n",
       "Prob(H) (two-sided):                  0.00   Kurtosis:                        13.37\n",
       "===================================================================================\n",
       "\n",
       "Warnings:\n",
       "[1] Covariance matrix calculated using the outer product of gradients (complex-step).\n",
       "[2] Covariance matrix is singular or near-singular, with condition number 4.56e+30. Standard errors may be unstable.\n",
       "\"\"\""
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#ARIMA - model \n",
    "model_confirmed = ARIMA(train[\"Confirmed\"],order=(3,2,4))\n",
    "model_confirmed = model_confirmed.fit()\n",
    "model_confirmed.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "f77085c1-8bb4-4c0f-aa82-b78377678422",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2020-06-28    5.143833e+06\n",
      "2020-06-29    5.249780e+06\n",
      "2020-06-30    5.359334e+06\n",
      "2020-07-01    5.471883e+06\n",
      "2020-07-02    5.586344e+06\n",
      "2020-07-03    5.701832e+06\n",
      "2020-07-04    5.817742e+06\n",
      "2020-07-05    5.933758e+06\n",
      "2020-07-06    6.049734e+06\n",
      "2020-07-07    6.165637e+06\n",
      "2020-07-08    6.281472e+06\n",
      "2020-07-09    6.397261e+06\n",
      "2020-07-10    6.513026e+06\n",
      "2020-07-11    6.628779e+06\n",
      "2020-07-12    6.744528e+06\n",
      "2020-07-13    6.860278e+06\n",
      "2020-07-14    6.976030e+06\n",
      "2020-07-15    7.091783e+06\n",
      "2020-07-16    7.207537e+06\n",
      "2020-07-17    7.323291e+06\n",
      "2020-07-18    7.439046e+06\n",
      "2020-07-19    7.554801e+06\n",
      "2020-07-20    7.670556e+06\n",
      "2020-07-21    7.786311e+06\n",
      "2020-07-22    7.902066e+06\n",
      "2020-07-23    8.017821e+06\n",
      "2020-07-24    8.133576e+06\n",
      "2020-07-25    8.249330e+06\n",
      "2020-07-26    8.365085e+06\n",
      "2020-07-27    8.480840e+06\n",
      "Freq: D, Name: predicted_mean, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "#prediction \n",
    "start = len(train)\n",
    "end = len(total)-1\n",
    "pred = model_confirmed.predict(start=start,end=end,typ=\"levels\")\n",
    "print(pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "4eaaa8ff-5d7b-403b-a62f-b34f489d2d46",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Date'>"
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#prediction plot, modeling data beyond July 2020\n",
    "pred.plot(legend=True)\n",
    "test[\"Confirmed\"].plot(legend=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "a037a098-c63e-4f8e-899f-a25ef9f224fa",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/53c5e5b4-da5e-4f04-a859-a142ed899dea/.local/lib/python3.9/site-packages/pmdarima/arima/_auto_solvers.py:524: ModelFitWarning: Error fitting  ARIMA(4,1,1)(2,0,0)[12]           (if you do not want to see these warnings, run with error_action=\"ignore\").\n",
      "Traceback:\n",
      "Traceback (most recent call last):\n",
      "  File \"/home/53c5e5b4-da5e-4f04-a859-a142ed899dea/.local/lib/python3.9/site-packages/pmdarima/arima/_auto_solvers.py\", line 508, in _fit_candidate_model\n",
      "    fit.fit(y, X=X, **fit_params)\n",
      "  File \"/home/53c5e5b4-da5e-4f04-a859-a142ed899dea/.local/lib/python3.9/site-packages/pmdarima/arima/arima.py\", line 603, in fit\n",
      "    self._fit(y, X, **fit_args)\n",
      "  File \"/home/53c5e5b4-da5e-4f04-a859-a142ed899dea/.local/lib/python3.9/site-packages/pmdarima/arima/arima.py\", line 524, in _fit\n",
      "    fit, self.arima_res_ = _fit_wrapper()\n",
      "  File \"/home/53c5e5b4-da5e-4f04-a859-a142ed899dea/.local/lib/python3.9/site-packages/pmdarima/arima/arima.py\", line 510, in _fit_wrapper\n",
      "    fitted = arima.fit(\n",
      "  File \"/opt/conda/envs/anaconda-2022.05-py39/lib/python3.9/site-packages/statsmodels/tsa/statespace/mlemodel.py\", line 704, in fit\n",
      "    mlefit = super(MLEModel, self).fit(start_params, method=method,\n",
      "  File \"/opt/conda/envs/anaconda-2022.05-py39/lib/python3.9/site-packages/statsmodels/base/model.py\", line 563, in fit\n",
      "    xopt, retvals, optim_settings = optimizer._fit(f, score, start_params,\n",
      "  File \"/opt/conda/envs/anaconda-2022.05-py39/lib/python3.9/site-packages/statsmodels/base/optimizer.py\", line 241, in _fit\n",
      "    xopt, retvals = func(objective, gradient, start_params, fargs, kwargs,\n",
      "  File \"/opt/conda/envs/anaconda-2022.05-py39/lib/python3.9/site-packages/statsmodels/base/optimizer.py\", line 651, in _fit_lbfgs\n",
      "    retvals = optimize.fmin_l_bfgs_b(func, start_params, maxiter=maxiter,\n",
      "  File \"/opt/conda/envs/anaconda-2022.05-py39/lib/python3.9/site-packages/scipy/optimize/lbfgsb.py\", line 197, in fmin_l_bfgs_b\n",
      "    res = _minimize_lbfgsb(fun, x0, args=args, jac=jac, bounds=bounds,\n",
      "  File \"/opt/conda/envs/anaconda-2022.05-py39/lib/python3.9/site-packages/scipy/optimize/lbfgsb.py\", line 360, in _minimize_lbfgsb\n",
      "    f, g = func_and_grad(x)\n",
      "  File \"/opt/conda/envs/anaconda-2022.05-py39/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py\", line 268, in fun_and_grad\n",
      "    self._update_grad()\n",
      "  File \"/opt/conda/envs/anaconda-2022.05-py39/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py\", line 238, in _update_grad\n",
      "    self._update_grad_impl()\n",
      "  File \"/opt/conda/envs/anaconda-2022.05-py39/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py\", line 155, in update_grad\n",
      "    self.g = approx_derivative(fun_wrapped, self.x, f0=self.f,\n",
      "  File \"/opt/conda/envs/anaconda-2022.05-py39/lib/python3.9/site-packages/scipy/optimize/_numdiff.py\", line 486, in approx_derivative\n",
      "    return _dense_difference(fun_wrapped, x0, f0, h,\n",
      "  File \"/opt/conda/envs/anaconda-2022.05-py39/lib/python3.9/site-packages/scipy/optimize/_numdiff.py\", line 557, in _dense_difference\n",
      "    df = fun(x) - f0\n",
      "  File \"/opt/conda/envs/anaconda-2022.05-py39/lib/python3.9/site-packages/scipy/optimize/_numdiff.py\", line 437, in fun_wrapped\n",
      "    f = np.atleast_1d(fun(x, *args, **kwargs))\n",
      "  File \"/opt/conda/envs/anaconda-2022.05-py39/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py\", line 134, in fun_wrapped\n",
      "    return fun(np.copy(x), *args)\n",
      "  File \"/opt/conda/envs/anaconda-2022.05-py39/lib/python3.9/site-packages/statsmodels/base/model.py\", line 531, in f\n",
      "    return -self.loglike(params, *args) / nobs\n",
      "  File \"/opt/conda/envs/anaconda-2022.05-py39/lib/python3.9/site-packages/statsmodels/tsa/statespace/mlemodel.py\", line 939, in loglike\n",
      "    loglike = self.ssm.loglike(complex_step=complex_step, **kwargs)\n",
      "  File \"/opt/conda/envs/anaconda-2022.05-py39/lib/python3.9/site-packages/statsmodels/tsa/statespace/kalman_filter.py\", line 983, in loglike\n",
      "    kfilter = self._filter(**kwargs)\n",
      "  File \"/opt/conda/envs/anaconda-2022.05-py39/lib/python3.9/site-packages/statsmodels/tsa/statespace/kalman_filter.py\", line 903, in _filter\n",
      "    self._initialize_state(prefix=prefix, complex_step=complex_step)\n",
      "  File \"/opt/conda/envs/anaconda-2022.05-py39/lib/python3.9/site-packages/statsmodels/tsa/statespace/representation.py\", line 983, in _initialize_state\n",
      "    self._statespaces[prefix].initialize(self.initialization,\n",
      "  File \"statsmodels/tsa/statespace/_representation.pyx\", line 1373, in statsmodels.tsa.statespace._representation.dStatespace.initialize\n",
      "  File \"statsmodels/tsa/statespace/_representation.pyx\", line 1362, in statsmodels.tsa.statespace._representation.dStatespace.initialize\n",
      "  File \"statsmodels/tsa/statespace/_initialization.pyx\", line 288, in statsmodels.tsa.statespace._initialization.dInitialization.initialize\n",
      "  File \"statsmodels/tsa/statespace/_initialization.pyx\", line 406, in statsmodels.tsa.statespace._initialization.dInitialization.initialize_stationary_stationary_cov\n",
      "  File \"statsmodels/tsa/statespace/_tools.pyx\", line 1206, in statsmodels.tsa.statespace._tools._dsolve_discrete_lyapunov\n",
      "numpy.linalg.LinAlgError: LU decomposition error.\n",
      "\n",
      "  warnings.warn(warning_str, ModelFitWarning)\n",
      "/home/53c5e5b4-da5e-4f04-a859-a142ed899dea/.local/lib/python3.9/site-packages/pmdarima/arima/_auto_solvers.py:524: ModelFitWarning: Error fitting  ARIMA(4,1,1)(2,0,2)[12]           (if you do not want to see these warnings, run with error_action=\"ignore\").\n",
      "Traceback:\n",
      "Traceback (most recent call last):\n",
      "  File \"/home/53c5e5b4-da5e-4f04-a859-a142ed899dea/.local/lib/python3.9/site-packages/pmdarima/arima/_auto_solvers.py\", line 508, in _fit_candidate_model\n",
      "    fit.fit(y, X=X, **fit_params)\n",
      "  File \"/home/53c5e5b4-da5e-4f04-a859-a142ed899dea/.local/lib/python3.9/site-packages/pmdarima/arima/arima.py\", line 603, in fit\n",
      "    self._fit(y, X, **fit_args)\n",
      "  File \"/home/53c5e5b4-da5e-4f04-a859-a142ed899dea/.local/lib/python3.9/site-packages/pmdarima/arima/arima.py\", line 524, in _fit\n",
      "    fit, self.arima_res_ = _fit_wrapper()\n",
      "  File \"/home/53c5e5b4-da5e-4f04-a859-a142ed899dea/.local/lib/python3.9/site-packages/pmdarima/arima/arima.py\", line 510, in _fit_wrapper\n",
      "    fitted = arima.fit(\n",
      "  File \"/opt/conda/envs/anaconda-2022.05-py39/lib/python3.9/site-packages/statsmodels/tsa/statespace/mlemodel.py\", line 704, in fit\n",
      "    mlefit = super(MLEModel, self).fit(start_params, method=method,\n",
      "  File \"/opt/conda/envs/anaconda-2022.05-py39/lib/python3.9/site-packages/statsmodels/base/model.py\", line 563, in fit\n",
      "    xopt, retvals, optim_settings = optimizer._fit(f, score, start_params,\n",
      "  File \"/opt/conda/envs/anaconda-2022.05-py39/lib/python3.9/site-packages/statsmodels/base/optimizer.py\", line 241, in _fit\n",
      "    xopt, retvals = func(objective, gradient, start_params, fargs, kwargs,\n",
      "  File \"/opt/conda/envs/anaconda-2022.05-py39/lib/python3.9/site-packages/statsmodels/base/optimizer.py\", line 651, in _fit_lbfgs\n",
      "    retvals = optimize.fmin_l_bfgs_b(func, start_params, maxiter=maxiter,\n",
      "  File \"/opt/conda/envs/anaconda-2022.05-py39/lib/python3.9/site-packages/scipy/optimize/lbfgsb.py\", line 197, in fmin_l_bfgs_b\n",
      "    res = _minimize_lbfgsb(fun, x0, args=args, jac=jac, bounds=bounds,\n",
      "  File \"/opt/conda/envs/anaconda-2022.05-py39/lib/python3.9/site-packages/scipy/optimize/lbfgsb.py\", line 360, in _minimize_lbfgsb\n",
      "    f, g = func_and_grad(x)\n",
      "  File \"/opt/conda/envs/anaconda-2022.05-py39/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py\", line 267, in fun_and_grad\n",
      "    self._update_fun()\n",
      "  File \"/opt/conda/envs/anaconda-2022.05-py39/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py\", line 233, in _update_fun\n",
      "    self._update_fun_impl()\n",
      "  File \"/opt/conda/envs/anaconda-2022.05-py39/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py\", line 137, in update_fun\n",
      "    self.f = fun_wrapped(self.x)\n",
      "  File \"/opt/conda/envs/anaconda-2022.05-py39/lib/python3.9/site-packages/scipy/optimize/_differentiable_functions.py\", line 134, in fun_wrapped\n",
      "    return fun(np.copy(x), *args)\n",
      "  File \"/opt/conda/envs/anaconda-2022.05-py39/lib/python3.9/site-packages/statsmodels/base/model.py\", line 531, in f\n",
      "    return -self.loglike(params, *args) / nobs\n",
      "  File \"/opt/conda/envs/anaconda-2022.05-py39/lib/python3.9/site-packages/statsmodels/tsa/statespace/mlemodel.py\", line 939, in loglike\n",
      "    loglike = self.ssm.loglike(complex_step=complex_step, **kwargs)\n",
      "  File \"/opt/conda/envs/anaconda-2022.05-py39/lib/python3.9/site-packages/statsmodels/tsa/statespace/kalman_filter.py\", line 983, in loglike\n",
      "    kfilter = self._filter(**kwargs)\n",
      "  File \"/opt/conda/envs/anaconda-2022.05-py39/lib/python3.9/site-packages/statsmodels/tsa/statespace/kalman_filter.py\", line 903, in _filter\n",
      "    self._initialize_state(prefix=prefix, complex_step=complex_step)\n",
      "  File \"/opt/conda/envs/anaconda-2022.05-py39/lib/python3.9/site-packages/statsmodels/tsa/statespace/representation.py\", line 983, in _initialize_state\n",
      "    self._statespaces[prefix].initialize(self.initialization,\n",
      "  File \"statsmodels/tsa/statespace/_representation.pyx\", line 1373, in statsmodels.tsa.statespace._representation.dStatespace.initialize\n",
      "  File \"statsmodels/tsa/statespace/_representation.pyx\", line 1362, in statsmodels.tsa.statespace._representation.dStatespace.initialize\n",
      "  File \"statsmodels/tsa/statespace/_initialization.pyx\", line 288, in statsmodels.tsa.statespace._initialization.dInitialization.initialize\n",
      "  File \"statsmodels/tsa/statespace/_initialization.pyx\", line 406, in statsmodels.tsa.statespace._initialization.dInitialization.initialize_stationary_stationary_cov\n",
      "  File \"statsmodels/tsa/statespace/_tools.pyx\", line 1206, in statsmodels.tsa.statespace._tools._dsolve_discrete_lyapunov\n",
      "numpy.linalg.LinAlgError: LU decomposition error.\n",
      "\n",
      "  warnings.warn(warning_str, ModelFitWarning)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "y = pmd.datasets.load_wineind()\n",
    "train, test = train_test_split(y, train_size=150)\n",
    "\n",
    "# Fit model\n",
    "model = pmd.auto_arima(train, seasonal=True, m=12)\n",
    "\n",
    "# make forecasts\n",
    "forecasts = model.predict(test.shape[0])  # predict N steps into the future\n",
    "\n",
    "# Visualize the forecasts (blue=train, green=forecasts)\n",
    "x = np.arange(y.shape[0])\n",
    "plt.plot(x[:150], train, c='blue')\n",
    "plt.plot(x[150:], forecasts, c='green')\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "id": "3ec67d4c-b519-4c00-af31-ede5ef7e4884",
   "metadata": {},
   "outputs": [],
   "source": [
    "#metrics to evaluate model \n",
    "from math import sqrt\n",
    "from sklearn import metrics\n",
    "\n",
    "#MAE - represents average error = sum(actual = prediction) / number of observations\n",
    "#print ('Mean Absolute Error : ', metrics.mean_absolute_error(pred, test['Confirmed']))\n",
    "#print ('Mean Squared Error : ', metrics.mean_squared_error(pred, test['Confirmed']))\n",
    "#print ('Mean Squar Root of Error : ', np.sqrt(metrics.mean_squared_error(pred, test['Confirmed'])))\n",
    "\n",
    "# I was not able to validate the arima model due to various errors. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "bdb15be0-df35-4fe9-bcf6-635f7fb738c4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                 target    Deaths  Recovered    Active  New cases  New deaths  \\\n",
      "target         1.000000  0.973484   0.901201  0.962781   0.919945    0.631174   \n",
      "Deaths         0.973484  1.000000   0.843340  0.954973   0.889651    0.685388   \n",
      "Recovered      0.901201  0.843340   1.000000  0.750722   0.846012    0.564113   \n",
      "Active         0.962781  0.954973   0.750722  1.000000   0.875359    0.605413   \n",
      "New cases      0.919945  0.889651   0.846012  0.875359   1.000000    0.773688   \n",
      "New deaths     0.631174  0.685388   0.564113  0.605413   0.773688    1.000000   \n",
      "New recovered  0.654318  0.620466   0.759967  0.522889   0.687658    0.511217   \n",
      "\n",
      "               New recovered  \n",
      "target              0.654318  \n",
      "Deaths              0.620466  \n",
      "Recovered           0.759967  \n",
      "Active              0.522889  \n",
      "New cases           0.687658  \n",
      "New deaths          0.511217  \n",
      "New recovered       1.000000  \n"
     ]
    }
   ],
   "source": [
    "#linear regression\n",
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LinearRegression\n",
    "import datetime\n",
    "\n",
    "covid = df\n",
    "covid['Date'] = pd.to_datetime(covid['Date'], dayfirst=True)\n",
    "covid = covid.rename(columns={'Confirmed': 'target'})\n",
    "\n",
    "print(covid.corr())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8500ddd0-808a-4b8d-acff-12a2adb6de2c",
   "metadata": {},
   "source": [
    "The correlation function shows that the confirmed cases have a positive correlation with the new cases."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "f54c55fc-8ea1-4a63-acee-0992a0c36b03",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Confirmed Cases against New cases of Covid-19')"
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot a scatter plot\n",
    "X = covid['target']\n",
    "y = covid['New cases']\n",
    "plt.scatter(X, y)\n",
    "plt.xlabel('New cases')\n",
    "plt.ylabel('confirmed cases')\n",
    "plt.title('Confirmed Cases against New cases of Covid-19')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "id": "fd8de956-ace6-48a7-8225-07fa42131714",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(4606, 1) (4606,)\n",
      "(1974, 1) (1974,)\n",
      "R-squared: 0.8341\n",
      "[8333.77820646 1274.52043063  258.51088758 ...  258.51088758  377.09683551\n",
      "  260.24688447]\n"
     ]
    }
   ],
   "source": [
    "#Splitting the dataset\n",
    "\n",
    "x_covid = covid.loc[:, ['target']]\n",
    "y_covid = covid['New cases']\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(x_covid, y_covid, test_size=0.3,random_state=0)\n",
    "\n",
    "print(X_train.shape, y_train.shape)\n",
    "print(X_test.shape, y_test.shape)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "from sklearn.linear_model import LinearRegression\n",
    "model2 = LinearRegression()\n",
    "model2.fit(X_train, y_train)\n",
    "print('R-squared: %.4f' % model2.score(X_test, y_test)) #coefficient of determination\n",
    "\n",
    "#Fitting Linear Regression to the dataset\n",
    "lin_reg = LinearRegression()\n",
    "lin_reg.fit(X_train[[\"target\"]], y_train)\n",
    "\n",
    "print(lin_reg.predict(X_test[[\"target\"]])) #predictions"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3fd61dcd-c77c-4747-b033-805dda87053a",
   "metadata": {},
   "source": [
    "Summary\n",
    "\n",
    "This linear regression model shows a 83% accuracy score and indicates that this model is a good predictor of future daily amount of Confirmed Covid-19 cases. The one way to improve this model is to increase the data set size and include values over a longer period of time. My data set was limited in size by having a maximum of 6 months of information. If more information was collected, it may have increased the accuracy of the prediction model.\n",
    "The R squared value is the coefficient of determination and shows how well the model can predict values. The score from the linear regression model is 83% and may correlate to a good model. I was not able to validate the ARIMA model due to errors displaying inconsistencies of the data sizes and wrong data types. We will move forward with the linear regression model since it was validated at over 80% accuracy. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "id": "9182047f-1368-4d84-97f5-0497b323186a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[258.58032745]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/envs/anaconda-2022.05-py39/lib/python3.9/site-packages/sklearn/base.py:450: UserWarning: X does not have valid feature names, but LinearRegression was fitted with feature names\n",
      "  warnings.warn(\n"
     ]
    }
   ],
   "source": [
    "import pickle\n",
    "from sklearn.datasets import make_regression\n",
    "pickle.dump(model2, open('model.pkl', \"wb\"))  \n",
    "\n",
    "X_val = 4\n",
    "\n",
    "model_model = pickle.load(open('model.pkl', \"rb\"))\n",
    "result = model_model.predict([[X_val]])\n",
    "#prob = model_model.predict_proba([[x_val]]) #linear regression does not support predict_proba function\n",
    "print(result)\n",
    "#print(prob)  # It returns 2 values. The first one is the probability of getting False, The second one is the probability of getting True."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e5188e28-880d-4c9a-896b-12648ff1f922",
   "metadata": {},
   "source": [
    "References\n",
    "\n",
    "Time Series Analysis : https://www.tableau.com/learn/articles/time-series-analysis\n",
    "ARIMA : https://pypi.org/project/pmdarima/\n",
    "ARIMA Validation : https://www.ncbi.nlm.nih.gov/pmc/articles/PMC9885024/\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "anaconda-2022.05-py39",
   "language": "python",
   "name": "conda-env-anaconda-2022.05-py39-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
